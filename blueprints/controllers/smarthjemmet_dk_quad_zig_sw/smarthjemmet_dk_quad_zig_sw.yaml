# Blueprint metadata
blueprint:
  name: Controller - Smarthjemmet.dk QUAD-ZIG-SW 4 button remote
  description: |
    # Controller - Smarthjemmet.dk QUAD-ZIG-SW 4 button remote

    Controller automation for executing any kind of action triggered by the provided Smarthjemmet.dk QUAD-ZIG-SW 4 button remote. Allows to optionally loop an action on a button long press.
    Supports Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/smarthjemmet_dk_quad_zig_sw#available-hooks) for additional details.

    📕 Full documentation regarding this blueprint is available [here](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/smarthjemmet_dk_quad_zig_sw).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://yarafie.github.io/awesome-ha-blueprints) project**.

    ℹ️ Version 2025.02.28
  source_url: https://github.com/yarafie/awesome-ha-blueprints/blob/main/blueprints/controllers/smarthjemmet_dk_quad_zig_sw/smarthjemmet_dk_quad_zig_sw.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - label: Zigbee2MQTT
              value: zigbee2mqtt
    controller_device:
      name: (Required) (deCONZ, ZHA, Zigbee2MQTT) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/QUAD-ZIG-SW.html
            - integration: mqtt
              manufacturer: smarthjemmet.dk
              model: FUGA compatible switch from Smarthjemmet.dk
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    # inputs for custom actions
    action_button_1_short:
      name: (Optional) Button 1 short press
      description: Action to run on short button 1 press.
      default: []
      selector:
        action:
    action_button_1_long:
      name: (Optional) Button 1 long press
      description: Action to run on long button 1 press.
      default: []
      selector:
        action:
    action_button_1_release:
      name: (Optional) Button 1 release
      description: Action to run on button 1 release after long press.
      default: []
      selector:
        action:
    action_button_1_double:
      name: (Optional) Button 1 double press
      description: Action to run on double button 1 press.
      default: []
      selector:
        action:
    action_button_1_triple:
      name: (Optional) Button 1 triple press
      description: Action to run on triple button 1 press.
      default: []
      selector:
        action:
    action_button_2_short:
      name: (Optional) Button 2 short press
      description: Action to run on short button 2 press.
      default: []
      selector:
        action:
    action_button_2_long:
      name: (Optional) Button 2 long press
      description: Action to run on long button 2 press.
      default: []
      selector:
        action:
    action_button_2_release:
      name: (Optional) Button 2 release
      description: Action to run on button 2 release after long press.
      default: []
      selector:
        action:
    action_button_2_double:
      name: (Optional) Button 2 double press
      description: Action to run on double button 2 press.
      default: []
      selector:
        action:
    action_button_2_triple:
      name: (Optional) Button 2 triple press
      description: Action to run on triple button 2 press.
      default: []
      selector:
        action:
    action_button_3_short:
      name: (Optional) Button 3 short press
      description: Action to run on short button 3 press.
      default: []
      selector:
        action:
    action_button_3_long:
      name: (Optional) Button 3 long press
      description: Action to run on long button 3 press.
      default: []
      selector:
        action:
    action_button_3_release:
      name: (Optional) Button 3 release
      description: Action to run on button 3 release after long press.
      default: []
      selector:
        action:
    action_button_3_double:
      name: (Optional) Button 3 double press
      description: Action to run on double button 3 press.
      default: []
      selector:
        action:
    action_button_3_triple:
      name: (Optional) Button 3 triple press
      description: Action to run on triple button 3 press.
      default: []
      selector:
        action:
    action_button_4_short:
      name: (Optional) Button 4 short press
      description: Action to run on short button 4 press.
      default: []
      selector:
        action:
    action_button_4_long:
      name: (Optional) Button 4 long press
      description: Action to run on long button 4 press.
      default: []
      selector:
        action:
    action_button_4_release:
      name: (Optional) Button 4 release
      description: Action to run on button 4 release after long press.
      default: []
      selector:
        action:
    action_button_4_double:
      name: (Optional) Button 4 double press
      description: Action to run on double button 4 press.
      default: []
      selector:
        action:
    action_button_4_triple:
      name: (Optional) Button 4 triple press
      description: Action to run on triple button 4 press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    button_1_long_loop:
      name: (Optional) Button 1 long press - loop until release
      description: Loop the button 1 action until the button is released.
      default: false
      selector:
        boolean:
    button_1_long_max_loop_repeats:
      name: (Optional) Button 1 long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    button_2_long_loop:
      name: (Optional) Button 2 long press - loop until release
      description: Loop the button 2 action until the button is released.
      default: false
      selector:
        boolean:
    button_2_long_max_loop_repeats:
      name: (Optional) Button 2 long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    button_3_long_loop:
      name: (Optional) Button 3 long press - loop until release
      description: Loop the button 3 action until the button is released.
      default: false
      selector:
        boolean:
    button_3_long_max_loop_repeats:
      name: (Optional) Button 3 long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    button_4_long_loop:
      name: (Optional) Button 4 long press - loop until release
      description: Loop the button 4 action until the button is released.
      default: false
      selector:
        boolean:
    button_4_long_max_loop_repeats:
      name: (Optional) Button 4 long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    # helpers used to properly recognize the remote button events
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
        usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration_id: !input integration
  button_1_long_loop: !input button_1_long_loop
  button_1_long_max_loop_repeats: !input button_1_long_max_loop_repeats
  button_2_long_loop: !input button_2_long_loop
  button_2_long_max_loop_repeats: !input button_2_long_max_loop_repeats
  button_3_long_loop: !input button_3_long_loop
  button_3_long_max_loop_repeats: !input button_3_long_max_loop_repeats
  button_4_long_loop: !input button_4_long_loop
  button_4_long_max_loop_repeats: !input button_4_long_max_loop_repeats
  helper_last_controller_event: !input helper_last_controller_event
  helper_debounce_delay: !input helper_debounce_delay
  # mapping between actions and integrations
  actions_mapping:
    zigbee2mqtt:
      # source: https://www.zigbee2mqtt.io/devices/QUAD-ZIG-SW.html
      button_1_short: [button_1_single]
      button_1_long: [button_1_hold]
      button_1_release: [button_1_release]
      button_1_double: [button_1_double]
      button_1_triple: [button_1_triple]
      button_2_short: [button_2_single]
      button_2_long: [button_2_hold]
      button_2_release: [button_2_release]
      button_2_double: [button_2_double]
      button_2_triple: [button_2_triple]
      button_3_short: [button_3_single]
      button_3_long: [button_3_hold]
      button_3_release: [button_3_release]
      button_3_double: [button_3_double]
      button_3_triple: [button_3_triple]
      button_4_short: [button_4_single]
      button_4_long: [button_4_hold]
      button_4_release: [button_4_release]
      button_4_double: [button_4_double]
      button_4_triple: [button_4_triple]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_1_short: '{{ actions_mapping[integration_id]["button_1_short"] }}'
  button_1_long: '{{ actions_mapping[integration_id]["button_1_long"] }}'
  button_1_release: '{{ actions_mapping[integration_id]["button_1_release"] }}'
  button_1_double: '{{ actions_mapping[integration_id]["button_1_double"] }}'
  button_1_triple: '{{ actions_mapping[integration_id]["button_1_triple"] }}'
  button_2_short: '{{ actions_mapping[integration_id]["button_2_short"] }}'
  button_2_long: '{{ actions_mapping[integration_id]["button_2_long"] }}'
  button_2_release: '{{ actions_mapping[integration_id]["button_2_release"] }}'
  button_2_double: '{{ actions_mapping[integration_id]["button_2_double"] }}'
  button_2_triple: '{{ actions_mapping[integration_id]["button_2_triple"] }}'
  button_3_short: '{{ actions_mapping[integration_id]["button_3_short"] }}'
  button_3_long: '{{ actions_mapping[integration_id]["button_3_long"] }}'
  button_3_release: '{{ actions_mapping[integration_id]["button_3_release"] }}'
  button_3_double: '{{ actions_mapping[integration_id]["button_3_double"] }}'
  button_3_triple: '{{ actions_mapping[integration_id]["button_3_triple"] }}'
  button_4_short: '{{ actions_mapping[integration_id]["button_4_short"] }}'
  button_4_long: '{{ actions_mapping[integration_id]["button_4_long"] }}'
  button_4_release: '{{ actions_mapping[integration_id]["button_4_release"] }}'
  button_4_double: '{{ actions_mapping[integration_id]["button_4_double"] }}'
  button_4_triple: '{{ actions_mapping[integration_id]["button_4_triple"] }}'
  # integrations which need to store the previous press event to determine which button was released
  integrations_with_prev_event_storage: [zigbee2mqtt]
  # build data to send within a controller event
  controller_id: !input controller_device
mode: restart
max_exceeded: silent
triggers:
  # triggers for zigbee2mqtt mqtt device action
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_1_single
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_1_hold
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_1_release
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_1_double
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_1_triple
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_2_single
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_2_hold
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_2_release
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_2_double
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_2_triple
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_3_single
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_3_hold
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_3_release
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_3_double
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_3_triple
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_4_single
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_4_hold
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_4_release
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_4_double
  - platform: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: button_4_triple
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
actions:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}
        {%- endif -%}
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{((\"a\": \".*\"|\"t\": \d+\.\d+)(, )?){2}\}$")) else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
      last_controller_event: '{{ (states(helper_last_controller_event) | from_json).a if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{((\"a\":\".*\"|\"t\":\d+\.\d+)(,)?){2}\}$")) else "" }}'
  # update helper
  - action: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in button_1_short }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_1_short
      - conditions: '{{ trigger_action | string in button_1_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_1_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_1_long_max_loop_repeats | int }}'
                      sequence: !input action_button_1_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_1_long
      - conditions:
          - '{{ trigger_action | string in button_1_release }}'
          # for integrations which need to store the last controller event, need to check the previous button event, stored in the provided input_text
          - '{{ not integration_id in integrations_with_prev_event_storage or last_controller_event | string in button_1_long }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_1_release
      - conditions: '{{ trigger_action | string in button_1_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_1_double
      - conditions: '{{ trigger_action | string in button_1_triple }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_1_triple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_1_triple
      - conditions: '{{ trigger_action | string in button_2_short }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_2_short
      - conditions: '{{ trigger_action | string in button_2_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_2_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_2_long_max_loop_repeats | int }}'
                      sequence: !input action_button_2_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_2_long
      - conditions:
          - '{{ trigger_action | string in button_2_release }}'
          # for integrations which need to store the last controller event, need to check the previous button event, stored in the provided input_text
          - '{{ not integration_id in integrations_with_prev_event_storage or last_controller_event | string in button_2_long }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_2_release
      - conditions: '{{ trigger_action | string in button_2_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_2_double
      - conditions: '{{ trigger_action | string in button_2_triple }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_2_triple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_2_triple
      - conditions: '{{ trigger_action | string in button_3_short }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_3_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_3_short
      - conditions: '{{ trigger_action | string in button_3_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_3_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_3_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_3_long_max_loop_repeats | int }}'
                      sequence: !input action_button_3_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_3_long
      - conditions:
          - '{{ trigger_action | string in button_3_release }}'
          # for integrations which need to store the last controller event, need to check the previous button event, stored in the provided input_text
          - '{{ not integration_id in integrations_with_prev_event_storage or last_controller_event | string in button_3_long }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_3_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_3_release
      - conditions: '{{ trigger_action | string in button_3_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_3_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_3_double
      - conditions: '{{ trigger_action | string in button_3_triple }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_3_triple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_3_triple
      - conditions: '{{ trigger_action | string in button_4_short }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_4_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_4_short
      - conditions: '{{ trigger_action | string in button_4_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_4_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_4_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_4_long_max_loop_repeats | int }}'
                      sequence: !input action_button_4_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_4_long
      - conditions:
          - '{{ trigger_action | string in button_4_release }}'
          # for integrations which need to store the last controller event, need to check the previous button event, stored in the provided input_text
          - '{{ not integration_id in integrations_with_prev_event_storage or last_controller_event | string in button_4_long }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_4_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_4_release
      - conditions: '{{ trigger_action | string in button_4_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_4_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_4_double
      - conditions: '{{ trigger_action | string in button_4_triple }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_4_triple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_4_triple
