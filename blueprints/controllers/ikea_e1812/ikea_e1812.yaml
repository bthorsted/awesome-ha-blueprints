# Blueprint metadata
blueprint:
  name: Controller - IKEA E1812 TRÅDFRI Shortcut button
  description: |
    # Controller - IKEA E1812 TRÅDFRI Shortcut button

    Controller automation for executing any kind of action triggered by the provided IKEA E1812 TRÅDFRI Shortcut button. Allows to optionally loop an action on a button long press.
    Supports deCONZ, ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1812#available-hooks) for additional details.

    ## More Info

    ℹ️ Version 2025.03.30
    📝 [Changelog](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1812/#changelog)
    📕 Full documentation regarding this blueprint is available [here](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1812).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://yarafie.github.io/awesome-ha-blueprints) project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**! 🌟

  source_url: https://github.com/yarafie/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e1812/ikea_e1812.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (deCONZ, ZHA, Zigbee2MQTT Required) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/E1812.html#ikea-e1812
            - integration: mqtt
              manufacturer: IKEA
              model: TRADFRI shortcut button
            # For backwards compatability with z2m 1.x. model_id is added to end of model rather than a seperate attribute in z2m 2.x
            - integration: mqtt
              manufacturer: IKEA
              model: TRADFRI shortcut button (E1812)
            # source: https://github.com/dresden-elektronik/deconz-rest-plugin/wiki/Supported-Devices
            - integration: zha
              manufacturer: IKEA of Sweden
              model: TRADFRI SHORTCUT Button
            - integration: deconz
              manufacturer: IKEA of Sweden
              model: TRADFRI SHORTCUT Button
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    # inputs for custom actions
    action_button_short:
      name: (Optional) Button short press
      description: Action to run on short button press.
      default: []
      selector:
        action:
    action_button_long:
      name: (Optional) Button long press
      description: Action to run on long button press.
      default: []
      selector:
        action:
    action_button_release:
      name: (Optional) Button release
      description: Action to run on button release after long press.
      default: []
      selector:
        action:
    action_button_double:
      name: (Optional) (Virtual) Button double press
      description: Action to run on double button press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    button_long_loop:
      name: (Optional) Button long press - loop until release
      description: Loop the button action until the button is released.
      default: false
      selector:
        boolean:
    button_long_max_loop_repeats:
      name: (Optional) Button long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    # inputs for enabling double press events
    button_double_press:
      name: (Optional) Expose button double press event
      description: Choose whether or not to expose the virtual double press event for the button. Turn this on if you are providing an action for the button double press event.
      default: false
      selector:
        boolean:
    # helpers used to properly recognize the remote button events
    helper_double_press_delay:
      name: (Optional) Helper - Double Press delay
      description: Max delay between the first and the second button press for the double press event. Provide a value only if you are using a double press action. Increase this value if you notice that the double press action is not triggered properly.
      default: 250
      selector:
        number:
          min: 100.0
          max: 5000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 10.0
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
        usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  button_long_loop: !input button_long_loop
  button_long_max_loop_repeats: !input button_long_max_loop_repeats
  button_double_press: !input button_double_press
  helper_last_controller_event: !input helper_last_controller_event
  helper_double_press_delay: !input helper_double_press_delay
  helper_debounce_delay: !input helper_debounce_delay
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # adjusted debounce delay so that the resulting double press delay is exactly as specified by the user when running the action, taking also account of debouncing
  # make sure it never goes below the minimum double press delay
  adjusted_double_press_delay: '{{ [helper_double_press_delay - helper_debounce_delay, 100] | max }}'
  # mapping between actions and integrations
  actions_mapping:
    deconz:
      button_short: ['1002']
      button_long: ['1001']
      button_release: ['1003']
    zha:
      button_short: ['on']
      button_long: [move_with_on_off_0_83]
      button_release: [stop]
    zigbee2mqtt:
      # source: https://www.zigbee2mqtt.io/devices/E1812.html#ikea-e1812
      button_short: ['on']
      button_long: [brightness_move_up]
      button_release: [brightness_stop]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_short: '{{ actions_mapping[integration_id]["button_short"] }}'
  button_long: '{{ actions_mapping[integration_id]["button_long"] }}'
  button_release: '{{ actions_mapping[integration_id]["button_release"] }}'
  # build data to send within a controller event
  controller_id: !input controller_device
mode: single
max_exceeded: silent
triggers:
  # triggers for zigbee2mqtt mqtt device action
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: 'on'
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: brightness_move_up
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: brightness_stop
  # triggers for other integrations
  - trigger: event
    event_type:
      - deconz_event
      - zha_event
    event_data:
      device_id: !input controller_device
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
actions:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{((\"a\":\".*\"|\"t\":\d+\.\d+)(,)?){2}\}$")) else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
  # update helper
  - action: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  # choose the sequence to run based on the received button event
  - choose:
      #
      # Actions for Button Single Press / Double Press Virtual
      - conditions: '{{ trigger_action | string in button_short }}'
        sequence:
          # Check If Double Press is Exposed
          - if:
              - condition: template
                value_template: '{{ button_double_press }}'
            # Handle Double Press Event
            then:
              - choose:
                  # Wait for trigger for second Button Press to treat as a Double Press
                  - conditions: []
                    sequence:
                      - wait_for_trigger:
                          # z2m trigger
                          - trigger: device
                            domain: mqtt
                            device_id: !input controller_device
                            type: action
                            subtype: 'on'
                          # zha trigger
                          - trigger: event
                            event_type: zha_event
                            event_data:
                              device_id: !input controller_device
                              command: 'on'
                          # dcz trigger
                          - trigger: event
                            event_type: deconz_event
                            event_data:
                              device_id: !input controller_device
                              event: '1002'
                        timeout:
                          milliseconds: '{{ adjusted_double_press_delay }}'
                        continue_on_timeout: true
                      # If a second button short press is triggered wait.trigger.idx will be defined
                      - if:
                          - condition: template
                            value_template: '{{ wait.trigger.idx is defined }}'
                        # Second short press trigger was received send Hook and Custom Actions as a Double Press
                        then:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_double
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_double
                        # Second short press trigger was not received send Hook and Custom Actions as a Single Press
                        else:
                          # fire the ahb hook event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button__short
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_short
            # Double Press is Not Exposed So send Hook and Custom Actions as a Single Press
            else:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_short
      #
      # Actions for Button Long Press
      - conditions: '{{ trigger_action | string in button_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_long
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_long_max_loop_repeats | int }}'
                      sequence: !input action_button_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_long
      #
      # Actions for Button Release Press
      - conditions: '{{ trigger_action | string in button_release }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_release
